{"version":3,"sources":["components/Header.jsx","components/Movie.jsx","components/Search.jsx","components/Nominee.jsx","components/Nominees.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Movie","movie","useState","nominated","isNominated","sendNotification","text","page","document","getElementsByTagName","notification","createElement","className","innerHTML","appendChild","setTimeout","removeChild","useEffect","nominees","JSON","parse","localStorage","getItem","i","found","length","imdbID","src","Poster","alt","Title","Year","onClick","setItem","stringify","push","window","location","reload","href","target","rel","Search","query","setQuery","results","setResults","loading","isLoading","message","setMessage","placeholder","setPlaceholder","cancel","fetchMovies","placeholderTemp","movieArr","Math","floor","random","randomMovie","searchUrl","axios","CancelToken","source","get","cancelToken","token","then","res","data","Response","catch","err","isCancel","type","value","id","onChange","event","input","map","key","Nominee","splice","console","log","Nominees","movies","setMovies","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.2c7a9ccf.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header(){\n    return (\n        <header>\n            <h1>The Shoppies</h1>\n            <h3>Search and nominate 5 movies</h3>\n        </header>\n    )\n}","import React, { useState, useEffect } from 'react';\n\nexport default function Movie({movie}){\n\n    const [nominated, isNominated] = useState(false)\n\n    function sendNotification(text){\n        let page = document.getElementsByTagName(\"body\")[0]\n        let notification = document.createElement('p')\n        notification.className = \"notification\"\n        notification.innerHTML = text\n        page.appendChild(notification)\n        setTimeout( () => {page.removeChild(notification)}, 6000);\n    }\n\n    function refreshPage() {\n        window.location.reload(false);\n      }\n\n    const nominate = () => {\n        let nominees = JSON.parse(localStorage.getItem(\"nominees\"))\n\n        if(!nominees){\n            localStorage.setItem('nominees', JSON.stringify([]))\n            nominees = JSON.parse(localStorage.getItem(\"nominees\"))\n        }\n\n        if(nominees.length >= 5){\n            sendNotification('You can nominate only 5 movies.')\n\n        }\n        else if(nominated){\n            sendNotification('You already nominated this film.')\n        }\n        else{\n            nominees.push(movie)\n            localStorage.setItem('nominees', JSON.stringify(nominees))\n            refreshPage()\n        }\n    }\n\n\n    useEffect (() =>{\n        let nominees = JSON.parse(localStorage.getItem(\"nominees\"))\n        let i = 0\n        let found = false\n        while (nominees.length > i && !found){\n            if(nominees[i].imdbID === movie.imdbID){\n                found = true\n                isNominated(true)\n            }\n            i++;\n        }\n        if(JSON.parse(localStorage.getItem(\"nominees\")).length === 5){\n            sendNotification('Great job! You nominated 5 movies.')\n        }\n    })\n\n    return(\n        <div className=\"movieCard\">\n            <img className={nominated ? \"disabled\" : \"enabled\"} src={(!movie.Poster || movie.Poster === \"N/A\") ? '/img/noImage.png' :  movie.Poster} alt={`${movie.Title} poster`}/>\n            <h5>{movie.Title}</h5>\n            <p>{movie.Year}</p>\n            <button className={nominated ? \"disabled\" : \"enabled\"} onClick={nominate}> {nominated ? \"Nominated\" : \"Nominate\"}</button>\n            <a href={`https://www.imdb.com/title/${movie.imdbID}/`} target=\"_blank\" rel=\"noopener noreferrer\">Check on IMDB</a>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Movie from './Movie'\n\nfunction Search(){\n    const [query, setQuery] = useState('')\n    const [results, setResults] = useState([])\n    const [loading, isLoading] = useState(false)\n    const [message, setMessage] = useState('Search for a movie!')\n    const [placeholder, setPlaceholder] = useState('')\n\n    var cancel = ''\n    \n    const randomMovie = () => {\n        const movieArr = ['Star Wars', 'Harry Potter', 'Spider-Man', 'Ready Player One', 'Rocky', 'Jojo Rabbit', 'Avengers', 'Star Trek', 'Lord of the Rings', 'The Matrix', 'The Hobbit', 'Toy Story']\n        return  movieArr[Math.floor(Math.random() * movieArr.length)]\n    }\n\n    const fetchMovies = (query) => {\n        if(!query){\n            let placeholderTemp = localStorage.getItem('lastSearch') ? localStorage.getItem('lastSearch') : randomMovie()\n            setPlaceholder(placeholderTemp)\n            query = placeholderTemp\n            localStorage.setItem('lastSearch', '')\n        }else{\n            localStorage.setItem('lastSearch', query)\n        }\n        const searchUrl  = `http://www.omdbapi.com/?i=tt3896198&apikey=7769270d&s=${query}&type=movie`\n        if(cancel){\n            cancel.cancel()\n        }\n        cancel = axios.CancelToken.source();\n\n        axios.get(searchUrl, {cancelToken: cancel.token}).then(res => {\n            setMessage( res.data.Response === \"True\" ? \"Search a movie!\" : \"Didn't found any movies. Search again!\")\n            setResults(res.data.Search)\n            isLoading(false)\n        }).catch(err => {if(axios.isCancel(err) || err){isLoading(false); setMessage('Failed to fetch')}})\n    }\n\n    useEffect(() => {\n        fetchMovies(query)\n     }, [query]);\n\n\n    function handleChange(event){\n        const input = event.target.value\n        isLoading(true)\n        setMessage('')\n        setQuery(input)\n    }\n\n\n    \n    return(\n        <div className=\"container\">\n            \n            <div className=\"searchContainer\">\n                <i className=\"fa fa-search icon\"> </i> \n                <input \n                    type=\"text\"\n                    value={query}\n                    id=\"searchBar\"\n                    placeholder={placeholder}\n                    onChange = {handleChange}\n                />\n            </div>\n            <div className=\"movies\">\n                {loading ? <object type=\"image/svg+xml\" data=\"/load.svg\" className=\"loading\">Loading...</object> : \"\"}\n                {!results ? <p className=\"message\">{message}</p> : results.map(movie => (\n                   <Movie movie={movie} key={movie.imdbID} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Search;","import React from 'react'\n\nexport default function Nominee({movie}){\n\n    function refreshPage() {\n        window.location.reload(false);\n      }\n\n    const unnominate = () => {\n        let nominees = JSON.parse(localStorage.getItem(\"nominees\"))\n        let i = 0\n        let found = false\n        while (nominees.length > i && !found){\n            if(nominees[i].imdbID === movie.imdbID){\n                found = true\n                nominees.splice(i,1)\n                localStorage.setItem('nominees', JSON.stringify(nominees))\n                refreshPage()\n            }\n            i++;\n        }\n        console.log(\"Problem\")\n    }\n\n    return(\n        <div className=\"nomineeMovie\"> \n            <img src={(!movie.Poster || movie.Poster === \"N/A\") ? '/img/noImage.png' :  movie.Poster} alt={`${movie.Title} poster`}/>\n            <div className=\"info\">\n                <h5>{movie.Title}</h5>\n                <p>{movie.Year}</p>\n                <button onClick = {unnominate}>Unnominate</button>\n            </div>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport Nominee from './Nominee'\n\nexport default function Nominees(){\n\n    const [movies, setMovies] = useState([])\n\n    useEffect(() => {\n        setMovies(JSON.parse(localStorage.getItem(\"nominees\")))\n     }, []);\n\n    return(\n        <div className=\"nominees\">\n            <h2>My nominees ({ movies ? movies.length : \"0\"}/5)</h2>\n            {movies ? movies.map(movie => (\n                <Nominee movie={movie} key={movie.imdbID} />)\n            ) : \"\"}\n        </div>\n        \n    )\n}","import React from 'react'\nimport './App.css'\nimport Header from './components/Header'\nimport Search from './components/Search'\nimport Nominees from './components/Nominees'\n\nfunction App() {\n  return (\n    <div id=\"wrapper\">\n        <Header />\n        <main>\n          <Search />\n          <Nominees />\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}